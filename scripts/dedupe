#!/usr/bin/env python

import os
import argparse
import re

TITLE_REGEX = re.compile("\s+<title>(.*)<\/title>$")
END_REGEX = re.compile("\s+<\/page>$")
MAGIC_REGEX = re.compile('{{#invoke.*}}', re.DOTALL)

TITLES = set()

def main():
    """Run the main program"""

    desc = """\
Remove duplicate titles from a wikimedia dump.

This script will scan through a wikimeda dump. Any duplicate titles will be
skipped. This script creates a temporary file and then replaces the original
file.

Beware that the temporary file is roughly the same size as the original, so
make sure you have enough space on the device to temporary duplicate the file.
"""

    parser = argparse.ArgumentParser(
        description=desc, formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument(
        "input", metavar="<intput file>", help="the input file to parse"
    )
    parser.add_argument(
        "-k", "--keep", action="store_true", help="Don't replace the original file"
    )



    args = parser.parse_args()

    tmp_file = args.input + ".clean"
    article = False
    content = ""
    title = None

    try:
        output = open(tmp_file, "w")
        with open(args.input) as _file:
            for line in _file:
                match = TITLE_REGEX.match(line)
                if match:
                    article = True
                    title = match.group(1)

                if not article:
                    output.write(line)
                    continue

                content += line

                if END_REGEX.match(line):
                    if title in TITLES:
                        print('Duplicate title: "%s" -- skipping' % title)
                    else:
                        TITLES.add(title)
                        content = MAGIC_REGEX.sub("", content)
                        output.write(content)

                    # Reset
                    content = ""
                    article = False

        # Replace the old file with the deduped file
        if not args.keep:
            os.rename(tmp_file, args.input)
    except KeyboardInterrupt:
        pass
    finally:
        # Cleanup if necessary
        if os.path.exists(tmp_file) and not args.keep:
            os.remove(tmp_file)

main()
